{"version":3,"sources":["app.js","AppConstants.js","InvestmentTreeHelper.js","ModalService.js","DashboardController.js","LevertonDashboardController.js","XlsxImportEditorController.js"],"names":["module","angular","require","component","template","join","config","$stateProvider","$urlRouterProvider","$httpProvider","$locationProvider","state","url","templateUrl","controller","controllerAs","html5Mode","enabled","requireBase","constant","FILE_UPLOAD_URI","FILE_UPLOAD_URI_LOCAL","otherPropertyKeys","factory","buildTree","data","treeData","Array","isArray","forEach","investment","investmentNode","_prepareInvestmentNode","push","_prepareChildrenNode","params","propertyName","nodeName","grandNode","text","children","dataGroupedByProperty","_","groupBy","Object","keys","keyName","dataItemNode","icon","dataItem","key","activeItemNode","_prepareLineItemNode","_financial","grandLineItemNode","stmtTypeKey","lineItemNode","lineItems","nodeItem","dataKey","_nodeItem","_prepareFinancialNodes","property","grandFinancialNode","financials","map","startDate","Date","endDate","financialNode","financeKey","_financeNodeItem","_preparePropertiesNode","grandPropertiesNode","properties","propertiesNode","propertyId","propKey","propNodeItem","grandRptreostatusNode","rptreostatus","rptreostatusByDates","item","toDateString","__keyName","rptreostatusNode","length","_prepareOtherPropertyNode","_otherGrandNodes","uniqDates","_otherPropertyKey","indexOf","sortBy","_dtStr","dateNode","otherPropertyNode","otherDataByDateAndPropertyKey","filter","otherPropertyGroupedData","otherPropertyGroupedKey","otherPropertyGroupedKeyName","_groupedNode","dataNode","loanId","_otherPropertyNode","_node","ModalService","$rootScope","$http","$modal","showXlsxImportEditorWizard","callback","modalInstance","open","animation","backdrop","size","scope","$new","windowClass","resolve","result","XLSX","async","$scope","$state","toastr","InvestmentTreeHelper","AppConstants","$ctrl","window","myCtrl","expectedServiceTabs","getAvaileAbleServiceTab","availableServiceTabs","reduce","memo","current","name","isAvailable","investments","undefined","$watch","newVal","oldVal","setTimeout","adjustAvailableTabs","readFileSheetName","serviceFile","$applyAsync","files","sheetNameMap","eachSeries","file","next","test","then","modifiedFile","fIndex","findIndex","_file","splice","reader","FileReader","onload","e","target","workbook","read","type","SheetNames","sheetName","toLowerCase","ex","message","console","log","readAsBinaryString","sheetNameMapKeys","some","keyNameItem","RegExp","uploadFiles","loanText","serviceText","sumittingFiles","$","jstree","destroy","getBase64","loanFile","res","_promises","_serviceFile","Promise","all","requestParams","ajax","dataType","cache","processData","timeout","contentType","JSON","stringify","success","resp","Investments","treeJsonData","opened","error","status","downloadJson","Blob","fileURL","URL","createObjectURL","link","document","createElement","href","download","replace","body","appendChild","click","removeChild","reject","readAsDataURL","onerror","$modalInstance","$sce","isProcessing","contextFile","sheetNameOptions","startProcessFile","Workbook","Sheets","submit","htmlTables","inValidSheetName","find","wb","table","htmlFrag","_html","valueOf","ws","utils","table_to_sheet","modifiedFileName","substring","lastIndexOf","wbout","write","bookSST","bookType","s2ab","s","buf","ArrayBuffer","view","Uint8Array","i","charCodeAt","close","doitnow","xw","process_wb","cb","fixdata","o","l","w","byteLength","String","fromCharCode","apply","slice","_htmlStr","editable","trustAsHtml"],"mappings":"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","file":"../app.js","sourcesContent":["/**\n * Created by sajibsarkar on 3/30/16.\n */\n\n(function () {\n\n    'use strict';\n\n    var module = angular.module(\"IrpToJsonViewer\", ['ui.router', 'ui.bootstrap', 'ui.bootstrap.tpls', 'ui.bootstrap.modal', 'ngResource', 'toastr', 'ngSanitize', 'ngFileUpload']);\n\n\n    require('bootstrap/dist/css/bootstrap.min.css');\n    require('angular-toastr/dist/angular-toastr.css');\n    require('ionicons/dist/css/ionicons.css');\n    require('../styles.css');\n\n    module.component('tinySpinner', {\n        template: ['<div class=\"tiny-spinner\">',\n            '<div class=\"bounce1\"></div>',\n            '<div class=\"bounce2\"></div>',\n            '<div class=\"bounce3\"></div></div>'].join('')});\n\n    /**\n     * Router config\n     */\n    module.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {\n        $stateProvider\n            .state('dashboard', {\n                url: '/',\n                templateUrl: '/views/dashboard.html',\n                controller: 'DashboardController',\n                controllerAs: '$ctrl'\n            });\n\n        $stateProvider\n            .state('leverton-api', {\n                url: '/levertonApi',\n                templateUrl: '/views/leverton.html',\n                controller: 'LevertonDashboardController',\n                controllerAs: '$ctrl'\n            });\n\n        // use the HTML5 History API\n        $locationProvider.html5Mode({\n            enabled: true,\n            requireBase: false\n        });\n    }]);\n})();\n","/**\n * Created by sajibsarkar on 11/26/17.\n */\n\n(function () {\n    'use strict';\n\n    let module = angular.module('IrpToJsonViewer');\n\n    module.constant(\"AppConstants\",{\n        FILE_UPLOAD_URI       :  'https://ief0uuoand.execute-api.us-east-1.amazonaws.com/prod/sajibTest',\n        FILE_UPLOAD_URI_LOCAL : '/api/files/upload'\n    });\n})();","/**\n * Created by sajibsarkar on 11/26/17.\n */\n\n(function() {\n    'use strict';\n\n    let module = angular.module('IrpToJsonViewer');\n\n    let otherPropertyKeys = [\n        'tccomparativefinancialstatusirp',\n        'rptddelinquentloanstatus',\n        'rptmhistoricalloanmod',\n        'rptrsvloc',\n        // 'rptreostatus',\n        'rptwservicerwatchlistirp',\n        //'tlr',\n        'rptadvrecovery'\n    ];\n\n    module.factory('InvestmentTreeHelper', [\n        function() {\n            return {\n                buildTree: function(data) {\n                    let treeData = [];\n                    if (Array.isArray(data)) {\n                        data.forEach(function(investment) {\n                            let investmentNode = _prepareInvestmentNode(\n                                investment\n                            );\n                            treeData.push(investmentNode);\n                        });\n                    }\n                    return treeData;\n                }\n            };\n        }\n    ]);\n\n    /***\n     * Private methods\n     */\n    function _prepareChildrenNode(data, params) {\n        let propertyName = params.propertyName;\n        let nodeName = params.nodeName || propertyName;\n        let grandNode = {\n            text: nodeName,\n            children: []\n        };\n\n        if (Array.isArray(data)) {\n            let dataGroupedByProperty = _.groupBy(data, propertyName);\n            Object.keys(dataGroupedByProperty).forEach(function(keyName) {\n                let dataItemNode = {\n                    text: keyName,\n                    children: [],\n                    icon: 'none'\n                };\n                dataGroupedByProperty[keyName].forEach(function(dataItem) {\n                    for (let key in dataItem) {\n                        let activeItemNode = {\n                            text: [key, dataItem[key]].join(' : '),\n                            icon: 'none',\n                            children: []\n                        };\n                        dataItemNode.children.push(activeItemNode);\n                    }\n                });\n                grandNode.children.push(dataItemNode);\n            });\n        }\n        return grandNode;\n    }\n\n    function _prepareLineItemNode(_financial) {\n\n        let grandLineItemNode = {\n            text: 'LineItems',\n            children: []\n        };\n\n\n            for(let stmtTypeKey in _financial.lineItems){\n\n                let lineItemNode = {\n                    text      : stmtTypeKey,\n                    children  : []\n                };\n\n                _.forEach(_financial.lineItems[stmtTypeKey], function (nodeItem) {\n                    Object.keys(nodeItem).forEach(function(dataKey) {\n                        if (!Array.isArray(nodeItem[dataKey])) {\n                            var _nodeItem = {\n                                text: [dataKey, nodeItem[dataKey]].join(\n                                    ' : '\n                                ),\n                                icon: 'none'\n                            };\n                            lineItemNode.children.push(_nodeItem);\n                        }\n                    });\n                });\n                grandLineItemNode.children.push(lineItemNode);\n            }\n\n\n        /*\n\n        if (Array.isArray(_financial.lineItems)) {\n            _financial.lineItems = _financial.lineItems.map(function(item) {\n                if (item.startDate) {\n                    item.startDate = new Date(item.startDate);\n                }\n                if (item.endDate) {\n                    item.endDate = new Date(item.endDate);\n                }\n                return item;\n            });\n            let lineItemsGroup = _.groupBy(\n                _financial.lineItems,\n                'categoryCode'\n            );\n            Object.keys(lineItemsGroup).forEach(function(lineItemGroupKey) {\n                let lineItemNode = _prepareChildrenNode(\n                    lineItemsGroup[lineItemGroupKey], {\n                        nodeName: lineItemGroupKey,\n                        propertyName: 'stmtType'\n                    }\n                );\n                grandLineItemNode.children.push(lineItemNode);\n            });\n        }\n        */\n\n        return grandLineItemNode;\n    }\n\n    function _prepareFinancialNodes(property) {\n        let grandFinancialNode = {\n            text: 'Financials',\n            children: []\n        };\n\n        if (Array.isArray(property.financials)) {\n            property.financials.map(function(_financial) {\n                if (_financial.startDate) {\n                    _financial.startDate = new Date(_financial.startDate);\n                }\n                if (_financial.endDate) {\n                    _financial.endDate = new Date(_financial.endDate);\n                }\n                let financialNode = {\n                    text: _financial.startDate,\n                    children: []\n                };\n                Object.keys(_financial).forEach(function(financeKey) {\n                    if (!Array.isArray(_financial[financeKey])) {\n                        let _financeNodeItem = {\n                            text: [financeKey, _financial[financeKey]].join(\n                                ' : '\n                            ),\n                            icon: 'none'\n                        };\n                        financialNode.children.push(_financeNodeItem);\n                    }\n                });\n                let grandLineItemNode = _prepareLineItemNode(_financial);\n                financialNode.children.push(grandLineItemNode);\n                grandFinancialNode.children.push(financialNode);\n            });\n        }\n\n        return grandFinancialNode;\n    }\n\n    function _preparePropertiesNode(investment) {\n        let grandPropertiesNode = {\n            text: 'Properties',\n            children: []\n        };\n\n        if (Array.isArray(investment.properties)) {\n            investment.properties.forEach(function(property) {\n                let propertiesNode = {\n                    text: property.propertyId,\n                    children: []\n                };\n\n                Object.keys(property).forEach(function(propKey) {\n                    if (!Array.isArray(property[propKey])) {\n                        let propNodeItem = {\n                            text: [propKey, property[propKey]].join(' : '),\n                            icon: 'none'\n                        };\n                        propertiesNode.children.push(propNodeItem);\n                    }\n                });\n\n                let grandRptreostatusNode = {\n                    text: 'rptreostatus',\n                    children: []\n                };\n                if (Array.isArray(property.rptreostatus)) {\n                    let rptreostatusByDates = _.groupBy(\n                        property.rptreostatus,\n                        function(item) {\n                            return new Date(item.startDate).toDateString();\n                        }\n                    );\n                    Object.keys(rptreostatusByDates).forEach(function(\n                        __keyName\n                    ) {\n                        let rptreostatusNode = {\n                            text: __keyName,\n                            children: []\n                        };\n                        rptreostatusByDates[__keyName].forEach(function(\n                            dataItem\n                        ) {\n                            Object.keys(dataItem).forEach(function(dataKey) {\n                                if (!Array.isArray(dataItem[dataKey])) {\n                                    var _nodeItem = {\n                                        text: [dataKey, dataItem[dataKey]].join(\n                                            ' : '\n                                        ),\n                                        icon: 'none'\n                                    };\n                                    rptreostatusNode.children.push(_nodeItem);\n                                }\n                            });\n                        });\n                        grandRptreostatusNode.children.push(rptreostatusNode);\n                    });\n                }\n                let grandFinancialNode = _prepareFinancialNodes(property);\n                propertiesNode.children.push(grandFinancialNode);\n                grandPropertiesNode.children.push(propertiesNode);\n                if (grandRptreostatusNode.children.length > 0) {\n                    propertiesNode.children.push(grandRptreostatusNode);\n                }\n            });\n        }\n        return grandPropertiesNode;\n    }\n\n    function _prepareOtherPropertyNode(investment, otherPropertyKeys) {\n        let _otherGrandNodes = [];\n\n        let uniqDates = [];\n\n        otherPropertyKeys.forEach(function(_otherPropertyKey) {\n            if (\n                Array.isArray(investment[_otherPropertyKey]) &&\n                investment[_otherPropertyKey].length > 0\n            ) {\n                investment[_otherPropertyKey] = investment[\n                    _otherPropertyKey\n                ].map(function(item) {\n                    if (item.startDate) {\n                        item.startDate = new Date(\n                            item.startDate\n                        ).toDateString();\n                        if (uniqDates.indexOf(item.startDate) === -1) {\n                            uniqDates.push(item.startDate);\n                        }\n                    }\n                    return item;\n                });\n            }\n        });\n\n        uniqDates = _.sortBy(uniqDates, item => new Date(item));\n        uniqDates.forEach(function(_dtStr) {\n            let dateNode = {\n                text: _dtStr,\n                children: []\n            };\n\n            otherPropertyKeys.forEach(function(_otherPropertyKey) {\n                let otherPropertyNode = {\n                    text: _otherPropertyKey,\n                    children: []\n                };\n\n                if (\n                    Array.isArray(investment[_otherPropertyKey]) &&\n                    investment[_otherPropertyKey].length > 0\n                ) {\n                    let otherDataByDateAndPropertyKey = investment[\n                        _otherPropertyKey\n                    ].filter(function(data) {\n                        return data.startDate && data.startDate === _dtStr;\n                    });\n\n                    let otherPropertyGroupedData;\n                    let otherPropertyGroupedKey;\n\n                    switch (_otherPropertyKey) {\n                        case 'tccomparativefinancialstatusirp':\n                            otherPropertyGroupedKey = 'propertyId';\n                            break;\n                        case 'rptrsvloc':\n                            otherPropertyGroupedKey = 'reserveAccountType';\n                            break;\n                        case 'rptwservicerwatchlistirp':\n                            otherPropertyGroupedKey = 'triggerCodes';\n                            break;\n                        case 'rptddelinquentloanstatus':\n                            otherPropertyGroupedKey = 'paidThroughDate';\n                            break;\n                        case 'tccomparativefinancialstatusirp':\n                            otherPropertyGroupedKey = 'prospectusId';\n                            break;\n                    }\n\n                    if (otherPropertyGroupedKey) {\n                        otherPropertyGroupedData = _.groupBy(\n                            otherDataByDateAndPropertyKey,\n                            otherPropertyGroupedKey\n                        );\n\n                        Object.keys(otherPropertyGroupedData).forEach(function(\n                            otherPropertyGroupedKeyName\n                        ) {\n                            let _groupedNode = {\n                                text: otherPropertyGroupedKeyName,\n                                children: []\n                            };\n                            otherPropertyGroupedData[\n                                otherPropertyGroupedKeyName\n                            ].forEach(function(dataItem) {\n                                Object.keys(dataItem).forEach(function(\n                                    propKey\n                                ) {\n                                    if (!Array.isArray(dataItem[propKey])) {\n                                        let dataNode = {\n                                            text: [\n                                                propKey,\n                                                dataItem[propKey]\n                                            ].join(' : '),\n                                            icon: 'none'\n                                        };\n                                        _groupedNode.children.push(dataNode);\n                                    }\n                                });\n                            });\n                            otherPropertyNode.children.push(_groupedNode);\n                        });\n                    } else {\n                        otherDataByDateAndPropertyKey.forEach(function(\n                            dataItem\n                        ) {\n                            Object.keys(dataItem).forEach(function(propKey) {\n                                if (!Array.isArray(dataItem[propKey])) {\n                                    let dataNode = {\n                                        text: [propKey, dataItem[propKey]].join(\n                                            ' : '\n                                        ),\n                                        icon: 'none'\n                                    };\n                                    otherPropertyNode.children.push(dataNode);\n                                }\n                            });\n                        });\n                    }\n                }\n                dateNode.children.push(otherPropertyNode);\n            });\n            _otherGrandNodes.push(dateNode);\n        });\n        return _otherGrandNodes;\n    }\n\n    function _prepareInvestmentNode(investment) {\n        let investmentNode = {\n            text: investment.loanId,\n            children: []\n        };\n\n        Object.keys(investment).forEach(function(key) {\n            if (!Array.isArray(investment[key])) {\n                var nodeItem = {\n                    text: [key, investment[key]].join(' : '),\n                    icon: 'none'\n                };\n                investmentNode.children.push(nodeItem);\n            }\n        });\n\n        let grandPropertiesNode = _preparePropertiesNode(investment);\n        investmentNode.children.push(grandPropertiesNode);\n        let _otherPropertyNode = _prepareOtherPropertyNode(\n            investment,\n            otherPropertyKeys\n        );\n        if (Array.isArray(_otherPropertyNode)) {\n            _otherPropertyNode.forEach(function(_node) {\n                investmentNode.children.push(_node);\n            });\n        }\n\n        return investmentNode;\n    }\n})();\n","/**\n * Created by sajibsarkar on 12/19/17.\n */\n\n\nlet module = angular.module('IrpToJsonViewer');\n\nmodule.factory('ModalService', [\n    '$rootScope',\n    '$http',\n    '$modal',\n    function ModalService($rootScope, $http, $modal) {\n\n        return {\n\n           /* /!***\n             * Show the confirmation options as bootstrap modal window.\n             * @param content\n             * @param title\n             * @returns {modalInstance.result|*}\n             *!/\n            showModalConfirmWindow : function (content, title, returnBoth) {\n\n                var modalInstance = $uibModal.open({\n                    animation: true,\n                    size: 'sm',\n                    templateUrl: '/views/modals/confirm-window.html',\n                    controller: 'ConfirmWindowController',\n                    backdrop     : true,\n                    scope        : $rootScope.$new(true),\n                    resolve: {\n                        params: function () {\n                            return {\n                                content: content,\n                                title: title,\n                                returnBoth: returnBoth\n                            };\n                        }\n                    }\n                });\n\n                return modalInstance.result;\n            },*/\n            showXlsxImportEditorWizard: function (params, callback) {\n                var modalInstance = $modal.open({\n                    animation: true,\n                    templateUrl: '/views/modals/xlx-import-editor.html',\n                    controller: 'XlsxImportEditorController',\n                    controllerAs: '$ctrl',\n                    backdrop: true,\n                    size: 'lg',\n                    scope           : $rootScope.$new(true),\n                    windowClass: 'xlsx-import-modal',\n                    resolve: {\n                        params: function () {\n                            return params;\n                        }\n                    }\n                });\n\n                return modalInstance.result;\n            }\n        };\n    }\n]);\n","/**\n * Created by sajibsarkar on 3/31/16.\n */\n\n\n(function () {\n    'use strict';\n\n    var module = angular.module('IrpToJsonViewer');\n    var XLSX  = require('xlsx');\n    var async = require('async');\n\n    /**\n     * The product list Controller\n     */\n    module.controller('DashboardController', ['$scope', '$state', 'toastr', 'InvestmentTreeHelper', 'AppConstants','ModalService', function ($scope, $state, toastr, InvestmentTreeHelper, AppConstants, ModalService) {\n\n        var $ctrl = this;\n\n        window.myCtrl = $ctrl;\n\n        let expectedServiceTabs = [\n            '_property',\n            '_financial',\n            'tCComparativeFinancialStatusIRP',\n            'rptDDelinquentLoanStatus',\n            'rptMHistoricalLoanMod',\n            'rptRsvLOC',\n            'rptREOStatus',\n            'rptWServicerWatchlistIRP',\n            'TLR',\n            'rptAdvRecovery'\n        ];\n\n\n        function getAvaileAbleServiceTab() {\n            $ctrl.availableServiceTabs = expectedServiceTabs.reduce(function (memo, current) {\n                  memo.push({\n                    name: current,\n                    isAvailable : false\n                });\n                return  memo;\n            },[]);\n\n            return  $ctrl.availableServiceTabs;\n        }\n\n\n        $ctrl.investments = undefined;\n\n        getAvaileAbleServiceTab();\n\n        $scope.$watch('$ctrl.serviceFile', function (newVal, oldVal) {\n            if(newVal !==  oldVal){\n                setTimeout(adjustAvailableTabs, 10)\n            }\n        });\n\n\n        function adjustAvailableTabs() {\n            let availableServiceTabs = getAvaileAbleServiceTab();\n            readFileSheetName($ctrl.serviceFile);\n            $scope.$applyAsync();\n        }\n\n\n\n        function readFileSheetName(files) {\n            let sheetNameMap = {};\n            async.eachSeries(files,  function (file, next) {\n\n                if(/\\.txt$/i.test(file.name) ||  /\\.csv/i.test(file.name)){\n                    ModalService.showXlsxImportEditorWizard({file:file}).then(function (modifiedFile) {\n                        let fIndex = $ctrl.serviceFile.findIndex((_file => _file === file));\n                        $ctrl.serviceFile.splice(fIndex, 1, modifiedFile);\n                        let reader = new FileReader();\n                        reader.onload = function (e) {\n                            var data = e.target.result;\n                            var workbook;\n                            try {\n                                workbook = XLSX.read(data, {type: 'binary'});\n                                if (workbook && Array.isArray(workbook.SheetNames)) {\n                                    workbook.SheetNames.forEach(function (sheetName) {\n                                        sheetNameMap[sheetName.toLowerCase()] = true;\n                                    });\n                                }\n                                next(null);\n\n                            } catch (ex) {\n                                var message = 'Failed to read the uploaded file. Please check if it contains unsupported characters or formats.';\n                                console.log(message);\n                                next(null);\n                            }\n\n                        };\n                        reader.readAsBinaryString(modifiedFile);\n                    }, function (ex) {\n                        console.log(ex);\n                        next(null);\n                    });\n                } else {\n                    let reader = new FileReader();\n                    reader.onload = function (e) {\n                        var data = e.target.result;\n                        var workbook;\n                        try {\n                            workbook = XLSX.read(data, {type: 'binary'});\n                            if (workbook && Array.isArray(workbook.SheetNames)) {\n                                workbook.SheetNames.forEach(function (sheetName) {\n                                    sheetNameMap[sheetName.toLowerCase()] = true;\n                                });\n                            }\n                            next(null);\n\n                        } catch (ex) {\n                            var message = 'Failed to read the uploaded file. Please check if it contains unsupported characters or formats.';\n                            console.log(message);\n                            next(null);\n                        }\n\n                    };\n                    reader.readAsBinaryString(file);\n                }\n\n\n            }, function () {\n\n                let sheetNameMapKeys = Object.keys(sheetNameMap);\n\n                $ctrl.availableServiceTabs = $ctrl.availableServiceTabs.map(function (item) {\n                    let  isAvailable= sheetNameMapKeys.some(function (keyNameItem) {\n                       return new RegExp(item.name+'$', 'i').test(keyNameItem)\n                    });\n                    if(isAvailable === true){\n                        item.isAvailable = isAvailable;\n                    }\n\n                    return item;\n                });\n\n                $scope.$applyAsync();\n            });\n\n        }\n\n        $ctrl.uploadFiles = function () {\n\n            let  loanText,  serviceText;\n\n            $ctrl.sumittingFiles = true;\n            $ctrl.investments = undefined;\n            $.jstree.destroy();\n\n            getBase64($ctrl.loanFile).then(res => {\n                loanText  =  res;\n\n                let _promises = [];\n\n                if(Array.isArray($ctrl.serviceFile)){\n                    $ctrl.serviceFile.forEach(function (_serviceFile) {\n                        _promises.push(getBase64(_serviceFile));\n                    });\n                }\n\n                return Promise.all(_promises);\n\n            }).then((res)=> {\n                serviceText  =  res;\n                return  true;\n            }).then(() => {\n\n                let  requestParams =  {\n                    \"loanFile\"  :  loanText,\n                    \"serviceFile\": serviceText\n                };\n\n                $.ajax(AppConstants.FILE_UPLOAD_URI_LOCAL, {\n                    type     : 'POST',\n                    dataType : 'json',\n                    cache    : false,\n                    processData: false,\n                    timeout  : 9999999999,\n                    contentType : 'application/json; charset=UTF-8',\n                    data     : JSON.stringify(requestParams),\n                    success: function (resp) {\n                       // console.log(resp);\n                        $ctrl.investments = resp.Investments;\n                        $ctrl.treeJsonData = InvestmentTreeHelper.buildTree(resp.Investments);\n                        $('#investmentTreeView').jstree({\n                            'core': {\n                                data      : { text: 'Investments',\n                                    state     : { opened    : true},\n                                    children  :  $ctrl.treeJsonData\n                                }\n                            }\n                        });\n                        $ctrl.sumittingFiles = false;\n                        $scope.$applyAsync();\n\n                    }, error: function (resp) {\n                        console.log(resp);\n                        toastr.error('Error : ' + resp.status);\n                        $ctrl.sumittingFiles = false;\n                        $scope.$applyAsync();\n                    }});\n            });\n        };\n\n\n        $ctrl.downloadJson=function () {\n\n            let data = $ctrl.investments;\n\n            //InvestmentJsonFormatHelper.formatDownloadableJson($ctrl.investments);\n            var file = new Blob([ JSON.stringify(data, null, 4) ], {\n                type : 'application/json'\n            });\n            var fileURL = URL.createObjectURL(file);\n            var link         = document.createElement('a');\n\n            link.href        = fileURL;\n            link.target      = '_blank';\n            link.download    = [$ctrl.loanFile.name.replace(/\\.\\w+/,''),'.json'].join('');\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n\n    }]);\n\n\n    function getBase64(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = error => reject(error);\n        });\n    }\n})();\n","/**\n * Created by sajibsarkar on 12/13/17.\n */\n\n\n\n\n(function () {\n    'use strict';\n\n    var module = angular.module('IrpToJsonViewer');\n    /**\n     * The LevertonDashboardController\n     */\n    module.controller('LevertonDashboardController', ['$scope', '$state', 'toastr', 'InvestmentTreeHelper', 'AppConstants', function ($scope, $state, toastr, InvestmentTreeHelper, AppConstants) {\n\n        var $ctrl = this;\n\n\n    }]);\n})();\n","/**\n * Created by sajibsarkar on 12/19/17.\n */\n\n\n\n(function () {\n    'use strict';\n\n    var module = angular.module('IrpToJsonViewer');\n\n    var XLSX = require('xlsx');\n\n    var async = require('async');\n\n    /**\n     * The product list Controller\n     */\n    module.controller('XlsxImportEditorController', ['$scope', '$state', 'toastr', 'InvestmentTreeHelper', 'AppConstants',  'params', 'ModalService', '$modalInstance', '$sce', function ($scope, $state, toastr, InvestmentTreeHelper, AppConstants, params, ModalService, $modalInstance, $sce) {\n\n\n                var $ctrl = this;\n\n\n                $ctrl.isProcessing = true;\n\n                $ctrl.contextFile = params.file;\n\n                $ctrl.sheetNameOptions = [\n                    \"_property\",\n                    \"_financial\",\n                    'tccomparativefinancialstatusirp',\n                    'rptddelinquentloanstatus'  ,\n                    'rptmhistoricalloanmod',\n                    'rptrsvloc',\n                    'rptreostatus',\n                    'rptwservicerwatchlistirp',\n                    'rptadvrecovery'\n                ];\n\n                setTimeout(function () {\n                    $ctrl.startProcessFile();\n                }, 3000);\n\n\n                function Workbook() {\n                    if(!(this instanceof Workbook)) return new Workbook();\n                    this.SheetNames = [];\n                    this.Sheets = {};\n                }\n\n\n                $ctrl.submit = function () {\n\n                    if(Array.isArray($ctrl.htmlTables)){\n                       let inValidSheetName = $ctrl.htmlTables.find(function (sheetName) {\n                            return typeof sheetName === 'undefined' || (sheetName  === 'Sheet1') || (sheetName  === null) || sheetName === '';\n                        });\n\n                       if(inValidSheetName){\n                           return toastr.error('Not a valid sheet name. Please choose appropriate sheet name.')\n                       }\n\n\n                        var wb = new Workbook();\n\n                        $ctrl.htmlTables.forEach(function (table) {\n\n                                let htmlFrag  = table._html.valueOf();\n\n                                let ws = XLSX.utils.table_to_sheet($(htmlFrag)[0]);\n                           // let ws = XLSX.utils.aoa_to_sheet([table.rows]);\n                            wb.SheetNames.push(table.sheetName);\n                            wb.Sheets[table.sheetName] = ws;\n                        });\n\n\n                        let modifiedFileName = $ctrl.contextFile.name.substring(0, $ctrl.contextFile.name.lastIndexOf('.'));\n\n                        var wbout = XLSX.write(wb, { type: 'binary', bookSST:false, bookType:'xlsx'});\n\n\n                        let s2ab = function (s) {\n                            var buf = new ArrayBuffer(s.length);\n                            var view = new Uint8Array(buf);\n                            for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n                            return buf;\n                        };\n\n\n                       let modifiedFile= new Blob([s2ab(wbout)], { type:\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" });\n\n                       modifiedFile.name = modifiedFileName+'.xlsx';\n                        $modalInstance.close(modifiedFile);\n\n                       /*\n                       let modifiedFile = new File(fileBlob, modifiedFileName+'.xlsx', {\n                           type : \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                       });\n                       */\n\n//modifiedFileName+'.xlsx'\n\n\n                       /*\n                            var o = XLSX.write(wb, { bookType:'html', type: 'binary', editable:true});\n                            sheetName : sheetName,\n                            rows      :  XLSX.utils.sheet_to_row_object_array(wb[\"Sheets\"][sheetName])\n                        });\n\n\n\n                        */\n                    }\n\n                };\n\n\n                $ctrl.startProcessFile = function () {\n\n                    var reader = new FileReader();\n                    reader.onload = function(e) {\n                        var data = e.target.result;\n                        function doitnow() {\n                            try {\n                                xw(data, process_wb);\n                            } catch(e) {\n                                console.log(e);\n                               /* alertify.alert('We unfortunately dropped the ball here.  Please test the file using the <a href=\"/js-xlsx/\">raw parser</a>.  If there are issues with the file processor, please send this file to <a href=\"mailto:dev@sheetjs.com?subject=I+broke+your+stuff\">dev@sheetjs.com</a> so we can make things right.', function(){});*/\n\n                            }\n                        }\n                        /*if(e.target.result.length > 1e6) alertify.confirm(\"This file is \" + e.target.result.length + \" bytes and may take a few moments.  Your browser may lock up during this process.  Shall we play?\", function(k) { if(k) doitnow(); });*/\n\n\n                         doitnow();\n                    };\n                    reader.readAsBinaryString($ctrl.contextFile);\n                };\n\n\n        function xw(data, cb) {\n\n            try {\n               let workbook = XLSX.read(data, {type: 'binary'});\n                cb(workbook);\n            } catch (ex) {\n                var message = 'Failed to read the uploaded file. Please check if it contains unsupported characters or formats.';\n                console.log(ex);\n                cb(null);\n            }\n\n        }\n\n        function fixdata(data) {\n            var o = \"\", l = 0, w = 10240;\n            for(; l < data.byteLength/w; ++l) o+=String.fromCharCode.apply(null,new Uint8Array(data.slice(l*w,l*w+w)));\n            o+=String.fromCharCode.apply(null, new Uint8Array(data.slice(l*w)));\n            return o;\n        }\n        function process_wb(wb) {\n\n\n            if(wb){\n               // console.log('wb', XLSX.utils.sheet_to_row_object_array(wb));\n                $ctrl.workbook = wb;\n                $ctrl.htmlTables = [];\n                wb.SheetNames.forEach(function(sheetName) {\n                    //console.log('data', XLSX.utils.aoa_to_sheet(wb[\"Sheets\"][sheetName]));\n                    let  _htmlStr = XLSX.write(wb, { sheetName : sheetName, bookType:'html', type: 'binary', editable:true});\n                    _htmlStr = _htmlStr.replace('<html><body>', '');\n                    _htmlStr = _htmlStr.replace('<table>', '<table class=\"table table-condensed\">');\n                    _htmlStr = _htmlStr.replace('</html></body>', '');\n                    $ctrl.htmlTables.push({\n                        sheetName : sheetName,\n                        _html     :  $sce.trustAsHtml(_htmlStr),\n                    });\n                });\n\n\n                //rows      :  XLSX.utils.sheet_to_row_object_array(wb[\"Sheets\"][sheetName])\n               // var o = XLSX.write(wb, { bookType:'html', type: 'binary', editable:true});\n               // document.getElementById('excel-table').outerHTML = o;\n\n                $ctrl.isProcessing = false;\n                $scope.$applyAsync();\n            }\n\n           // XLSX.utils.sheet_to_row_object_array\n            //spinner.stop();\n\n        }\n\n\n    }]);\n\n})();\n"]}